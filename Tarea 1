#include <iostream>
#include <cstring>
#include <cstdlib>

using namespace std;

const int MAX_PREGUNTAS = 100;

enum NivelBloom {
    RECORDAR = 1,
    ENTENDER,
    APLICAR,
    ANALIZAR,
    EVALUAR,
    CREAR
};

// Clase base
class Pregunta {
public:
    int id;
    char texto[200];
    int nivelBloom;
    int tiempoEstimado;
    char solucion[100];
    bool usadaAnioAnterior;

    virtual void mostrar() const {
        cout << "ID: " << id
             << " | Nivel Bloom: " << nivelBloom
             << " | Tiempo: " << tiempoEstimado << " min"
             << " | Usada año anterior: " << (usadaAnioAnterior ? "Sí" : "No")
             << "\nTexto: " << texto
             << "\nSolución: " << solucion << "\n";
    }
};

// Clase hija que hereda de Pregunta
class PreguntaConImagen : public Pregunta {
public:
    char rutaImagen[200];

    // Sobreescribimos el método mostrar
    void mostrar() const override {
        Pregunta::mostrar();
        cout << "Imagen asociada: " << rutaImagen << "\n";
    }
};

Pregunta* banco[MAX_PREGUNTAS];
int totalPreguntas = 0;

void mostrarNiveles() {
    cout << "1. Recordar\n2. Entender\n3. Aplicar\n4. Analizar\n5. Evaluar\n6. Crear\n";
}
int buscarPreguntaPorID(int id) {
    for (int i = 0; i < totalPreguntas; i++) {
        if (banco[i]->id == id) return i;
    }
    return -1;
}

void crearPregunta() {
    if (totalPreguntas >= MAX_PREGUNTAS) {
        cout << "Límite de preguntas alcanzado.\n";
        return;
    }

    cout << "¿La pregunta tiene imagen? (s/n): ";
    char tieneImagen;
    cin >> tieneImagen;

    Pregunta* p;

    if (tieneImagen == 's'  tieneImagen == 'S') {
        p = new PreguntaConImagen();
    } else {
        p = new Pregunta();
    }

    p->id = totalPreguntas + 1;

    cout << "Ingrese el texto de la pregunta: ";
    cin.ignore();
    cin.getline(p->texto, 200);

    mostrarNiveles();
    cout << "Seleccione el nivel Bloom (1-6): ";
    cin >> p->nivelBloom;

    cout << "Ingrese el tiempo estimado para responder (min): ";
    cin >> p->tiempoEstimado;

    cout << "Ingrese la solución esperada: ";
    cin.ignore();
    cin.getline(p->solucion, 100);

    char usada;
    cout << "¿Fue usada el año anterior? (s/n): ";
    cin >> usada;
    p->usadaAnioAnterior = (usada == 's'  usada == 'S');

    if (tieneImagen == 's' || tieneImagen == 'S') {
        cout << "Ingrese la ruta de la imagen: ";
        cin.ignore();
        cin.getline(((PreguntaConImagen*)p)->rutaImagen, 200);
    }

    banco[totalPreguntas++] = p;

    cout << "Pregunta creada con éxito.\n";
}
void mostrarPreguntas() {
    if (totalPreguntas == 0) {
        cout << "No hay preguntas registradas.\n";
        return;
    }

    for (int i = 0; i < totalPreguntas; i++) {
        banco[i]->mostrar();
        cout << "\n";
    }
}

void menu() {
    int opcion;
    do {
        cout << "\n--- MENÚ PRINCIPAL ---\n";
        cout << "1. Crear pregunta\n2. Mostrar preguntas\n3. Salir\n";
        cout << "Seleccione una opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1: crearPregunta(); break;
            case 2: mostrarPreguntas(); break;
            case 3: cout << "¡Hasta luego!\n"; break;
            default: cout << "Opción no válida.\n";
        }

    } while (opcion != 3);
}

int main() {
    menu();
    // Liberar memoria
    for (int i = 0; i < totalPreguntas; i++) {
        delete banco[i];
    }
    return 0;
}
