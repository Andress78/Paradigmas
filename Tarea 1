#include <iostream>
#include <vector>
#include <string>
#include <limits>
#include <algorithm>
#include <map>

using namespace std;

enum class NivelBloom {
    RECORDAR = 1,
    ENTENDER,
    APLICAR,
    ANALIZAR,
    EVALUAR,
    CREAR
};

class Pregunta {
protected:
    string enunciado;
    NivelBloom nivel;
public:
    Pregunta(const string& e, NivelBloom n)
      : enunciado(e), nivel(n) {}
    virtual void mostrar() const = 0;
    NivelBloom getNivel() const { return nivel; }
    virtual ~Pregunta() {}
};

class PreguntaOpcionMultiple : public Pregunta {
private:
    vector<string> opciones;
    int respuestaCorrecta;
public:
    PreguntaOpcionMultiple(const string& e, NivelBloom n,
                           const vector<string>& o, int r)
      : Pregunta(e, n), opciones(o), respuestaCorrecta(r) {}
    void mostrar() const override {
        cout << "Opción Múltiple | Nivel " << static_cast<int>(nivel) << "\n"
             << enunciado << "\n";
        for (size_t i = 0; i < opciones.size(); ++i)
            cout << "  " << i+1 << ") " << opciones[i] << "\n";
        cout << "  ▶ Correcta: " << respuestaCorrecta+1 << "\n";
    }
};

class PreguntaVerdaderoFalso : public Pregunta {
private:
    bool respuesta;
public:
    PreguntaVerdaderoFalso(const string& e, NivelBloom n, bool r)
      : Pregunta(e, n), respuesta(r) {}
    void mostrar() const override {
        cout << "Verdadero/Falso | Nivel " << static_cast<int>(nivel) << "\n"
             << enunciado << "\n"
             << "  ▶ " << (respuesta ? "Verdadero" : "Falso") << "\n";
    }
};

class PreguntaRespuestaCorta : public Pregunta {
private:
    string respEsperada;
public:
    PreguntaRespuestaCorta(const string& e, NivelBloom n, const string& r)
      : Pregunta(e, n), respEsperada(r) {}
    void mostrar() const override {
        cout << "Respuesta Corta | Nivel " << static_cast<int>(nivel) << "\n"
             << enunciado << "\n"
             << "  ▶ Esperada: " << respEsperada << "\n";
    }
};

class Examen {
private:
    vector<Pregunta*> preguntas;
public:
    void agregar(Pregunta* p) {
        preguntas.push_back(p);
    }
    void mostrarTodas() const {
        cout << "\n===== EXAMEN =====\n";
        for (auto p : preguntas) {
            p->mostrar();
            cout << "--------------------\n";
        }
    }
    void listarPorNivel(NivelBloom nivel) const {
        cout << "\n--- Nivel " << static_cast<int>(nivel) << " ---\n";
        for (auto p : preguntas) {
            if (p->getNivel() == nivel) {
                p->mostrar();
                cout << "----------------\n";
            }
        }
    }
    void resumenPorNivel() const {
        map<NivelBloom,int> cnt;
        for (auto p : preguntas) cnt[p->getNivel()]++;
        cout << "\n=== Resumen por Nivel Bloom ===\n";
        for (int i = static_cast<int>(NivelBloom::RECORDAR);
             i <= static_cast<int>(NivelBloom::CREAR); ++i) {
            cout << i << ": " << cnt[static_cast<NivelBloom>(i)]
                 << " preguntas\n";
        }
    }
    ~Examen() {
        for (auto p : preguntas) delete p;
    }
};

class Menu {
private:
    Examen examen;

    NivelBloom leerNivel() {
        int n;
        cout << "Nivel (1-Recordar 2-Entender 3-Aplicar 4-Analizar 5-Evaluar 6-Crear): ";
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        n = max(1, min(6, n));
        return static_cast<NivelBloom>(n);
    }

    void opMultiple() {
        string e;
        vector<string> o(4);
        NivelBloom n = leerNivel();
        cout << "Enunciado: ";
        getline(cin, e);
        for (int i = 0; i < 4; ++i) {
            cout << "Opción " << i+1 << ": ";
            getline(cin, o[i]);
        }
        int r;
        cout << "Correcta (1-4): ";
        cin >> r;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        examen.agregar(new PreguntaOpcionMultiple(e, n, o, r-1));
    }

    void vOF() {
        string e;
        NivelBloom n = leerNivel();
        cout << "Enunciado: ";
        getline(cin, e);
        char c;
        cout << "Verdadero(v)/Falso(f): ";
        cin >> c;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        examen.agregar(new PreguntaVerdaderoFalso(e, n, (c=='v'||c=='V')));
    }

    void respCorta() {
        string e, r;
        NivelBloom n = leerNivel();
        cout << "Enunciado: ";
        getline(cin, e);
        cout << "Respuesta esperada: ";
        getline(cin, r);
        examen.agregar(new PreguntaRespuestaCorta(e, n, r));
    }

public:
    void mostrar() {
        int op;
        do {
            cout << "\n1) Opción múltiple\n"
                 << "2) Verdadero/Falso\n"
                 << "3) Respuesta corta\n"
                 << "4) Mostrar examen\n"
                 << "5) Listar por nivel\n"
                 << "6) Resumen niveles\n"
                 << "7) Salir\n"
                 << "Elige: ";
            cin >> op;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            switch (op) {
                case 1: opMultiple();         break;
                case 2: vOF();                break;
                case 3: respCorta();          break;
                case 4: examen.mostrarTodas();    break;
                case 5: {
                    NivelBloom n = leerNivel();
                    examen.listarPorNivel(n);
                    break;
                }
                case 6: examen.resumenPorNivel();  break;
                case 7: cout << "Fin\n";      break;
                default: cout << "Inválido\n";
            }
        } while (op != 7);
    }
};

int main() {
    Menu m;
    m.mostrar();
    return 0;
}
